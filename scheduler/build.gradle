apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

mainClassName = "org.apache.mesos.elasticsearch.scheduler.ElasticsearchScheduler"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.2'
    }
}

dependencies {

    compile project(':commons')
    compile project(':elasticsearch-cloud-mesos')

    compile "commons-cli:commons-cli:1.0"
    compile "commons-io:commons-io:2.4"
    compile "log4j:log4j:1.2.16"

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'joda-time:joda-time:2.3'

}

jar {
    baseName = "elasticsearch-mesos-scheduler"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest { attributes 'Main-Class': 'org.apache.mesos.elasticsearch.scheduler.ElasticsearchScheduler' }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

task copyJar(type: Copy) {
    dependsOn   'jar'
    from        "build/libs/elasticsearch-mesos-scheduler-${project.version}.jar"
    into        'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task copyCloudMesos(type: Copy) {
    dependsOn   'copyJar'
    from        { project(":elasticsearch-cloud-mesos").getTasksByName("zip", false)[0].outputs.files[0] }
    into        'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task copyExecutor(type: Copy) {
    dependsOn   'copyCloudMesos'
    from        { project(":executor").getTasksByName("copyJar", false)[0].outputs.files[0] }
    into        'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn   'copyExecutor'
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp","https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)

        }
    }
    else {
        url = 'unix:///var/run/docker.sock'
    }
    inputDir = file('.')
    tag = 'mesos/elasticsearch-scheduler'
}
